<project name="runwarbuild" default="runwar.compile" xmlns:antcontrib="antlib:net.sf.antcontrib">

	<dirname property="runwarbuild.basedir" file="${ant.file.runwarbuild}" />
	<mvn-repo id="repo.local" url="file://${cfdistro.basedir}/artifacts" />
	<property name="clean" value="false" />

  <macrodef name="runwar.initprops">
    <sequential>
      <dirname property="runwarbuild.basedir" file="${ant.file.runwar}" />
      <property name="war.name" value="runwar" />
      <property name="build.sysclasspath" value="last" />

      <property name="server.deploy.dir" value="${war.target.dir}/../" />
      <property name="server.log.dir" value="${log.dir}/" />
      <property name="server.port" value="8088" />
      <property name="server.port.stop" value="8079" />
      <property name="server.port.http" value="${server.port}" />
      <property name="server.port.ajp" value="8009" />
      <property name="server.ajp.enable" value="false" />
      <property name="server.url" value="http://127.0.0.1:${server.port.http}${war.contextpath}/index.cfm" />
      <property name="server.memory.max" value="256M" />
      <property name="server.host.max" value="256M" />
      <property name="server.jvm.args" value="" />

      <property name="runwar.war.path" location="${war.target.dir}" />
      <property name="runwar.war.contextpath" value="${war.contextpath}" />
      <property name="runwar.port" value="${server.port.http}" />
      <property name="runwar.host" value="${server.host}" />
      <property name="runwar.maxmemory" value="${server.memory.max}" />
      <property name="runwar.log.dir" location="${server.log.dir}/" />
      <property name="log.level" value="WARN" />
      <property name="loglevel" value="${log.level}" />
      <property name="runwar.log.level" value="${loglevel}" />
      <property name="runwar.stop.socket" value="${server.port.stop}" />
      <property name="runwar.cfml.dirlist" value="${src.dir}" />
      <property name="open.url" value="${server.url}" />
      <fix-url-slashes property="open.url" />
      <property name="runner.temp.dir" value="${temp.dir}/runner" />
      <property name="runner.jar" value="${runner.temp.dir}/${war.name}.jar" />

      <property name="distro.name" value="${distro.name}" />
      <property name="company.name" value="CFML Proponents" />
      <property name="product.name.short" value="${distro.name}" />
      <property name="product.name.long" value="${distro.name}" />
      <property name="product.version" value="0.0.1.1" />
      <property name="product.version.txt" value="0.0.1.1" />
      <antcontrib:if>
        <equals arg1="${default.cfengine}" arg2="acf" />
        <then>
          <path id="runwar.lib.path">
            <fileset dir="${runwar.lib.dir}">
              <include name="*.jar" />
            </fileset>
          </path>
        </then>
        <else>
          <path id="runwar.lib.path">
            <fileset dir="${runwar.lib.dir}">
              <include name="*.jar" />
            </fileset>
          </path>
        </else>
      </antcontrib:if>

    </sequential>
  </macrodef>
  <runwar.initprops />

  <target name="runwar.compile" depends="get.deps">
    <runwar.initprops />
    <delete dir="${dist.dir}" includes="*.jar" />
    <delete dir="${runwar.bin.dir}/runwar/" />
    <mkdir dir="${runwar.bin.dir}/runwar/" />
    <!--
      <javac srcdir="${runwar.src.dir}/runwar" destdir="${runwar.bin.dir}/runwar"
      classpathref="runwar.lib.path" compliance="1.7"/>
    -->
    <javac-ecj srcdir="${runwar.src.dir}/" destdir="${runwar.bin.dir}/runwar" classpath="${toString:runwar.lib.path}"
      compliance="1.7" />
  </target>

  <target name="runwar.jar" depends="runwar.compile">
    <runwar.initprops />
    <delete dir="${temp.dir}/jar"/>
    <copy todir="${runwar.bin.dir}/runwar/runwar/">
      <fileset dir="${runwar.src.dir}/runwar/" includes="runwar.keystore, runwar.truststore, icon.png, taskbar.json, urlrewrite.xml" />
    </copy>
    <copy todir="${runwar.bin.dir}/runwar/runwar/" file="${runwar.src.dir}/runwar/version.properties">
      <filterchain>
        <expandproperties />
        <deletecharacters chars="\n" />
        <trim />
        <ignoreblank />
      </filterchain>
    </copy>
    <copy todir="${runwar.bin.dir}/runwar/">
      <fileset dir="${runwar.src.dir}/" includes="javax/**, META-INF/**" />
    </copy>
    <jar destfile="${runwar.jar.file}" duplicate="preserve" basedir="${runwar.bin.dir}/runwar/"
      includes="**/*.class, **/*.png, **META-INF/services/*,**/runwar.*store, **/*.dtd, **/*.xsd, **/META-INF/INDEX.LIST, **/*.properties, **/*.json, **/*.xml, javax/**"
      filesetmanifest="mergewithoutmain">
      <manifest>
        <attribute name="Main-Class" value="runwar.Start" />
        <attribute name="Class-Path" value="./${runwar.jar}" />
        <attribute name="Premain-Class" value="lucee.runtime.instrumentation.ExternalAgent" />
        <attribute name="Agent-Class" value="lucee.runtime.instrumentation.ExternalAgent" />
        <attribute name="Can-Redefine-Classes" value="true" />
        <attribute name="Can-Retransform-Classes" value="true" />
        <attribute name="Implementation-Version" value="${runwarbuild.version}" />
      </manifest>
      <zipgroupfileset dir="${runwar.lib.dir}"/>
    </jar>
    <unzip src="${runwar.jar.file}" dest="${temp.dir}/jar" />
    <delete dir="${temp.dir}/jar" includes="**/README*, **/*LICENSE*,**/*.SF,**/*.DSA,**/*.RSA" verbose="true"/>
    <antcontrib:for param="file">
      <path><fileset dir="${runwar.lib.dir}" includes="*.jar"/></path>
      <sequential>
        <local name="depjar"/>
        <basename property="depjar" file="@{file}" suffix=".jar" />
        <echo message="${depjar}"/>
        <unzip src="@{file}" dest="${temp.dir}/jar/${depjar}">
          <patternset includes="**/README*,**/*LICENSE*"/>
          <mapper type="flatten"/>
        </unzip>
      </sequential>
    </antcontrib:for>
    <delete file="${runwar.jar.file}" />
    <zip destfile="${runwar.jar.file}" update="false" level="9">
      <fileset dir="${temp.dir}/jar" excludes="**/META-INF/*.SF,**/META-INF/*.DSA,**/META-INF/*.RSA" />
    </zip>
    <property name="cfmlprojects.keystore" value="" />
<!--
    <antcontrib:if>
      <not><equals arg1="${cfmlprojects.keystore}" arg2="" /></not>
      <then>
        <signjar jar="${runwar.jar.file}" alias="cfmlprojects" force="true" tsaurl="http://tsa.starfieldtech.com" keystore="${cfmlprojects.keystore}"
        storepass="changeit"/>
      </then>
    </antcontrib:if>
-->
  </target>

  <target name="runwar.javadoc">
    <property name="javadoc.dir" value="${dist.dir}/javadoc" />
    <property name="javadoc.linksource" value="true" />
    <echo>*************************************</echo>
    <echo>***** Generating JavaDoc ******</echo>
    <echo>*************************************</echo>
    <echo>JavaDoc dir: ${javadoc.dir}</echo>
    <delete dir="${javadoc.dir}" />
    <javadoc packagenames="runwar.*"
          access="public"
          sourcepath="${runwar.src.dir}"
          excludepackagenames="sun.*"
          additionalparam="-Xdoclint:none"
          destdir="${javadoc.dir}"
          author="true"
          version="true"
          use="true"
          maxmemory="512m"
          linksource="true"
          classpathref="runwar.lib.path"
          windowtitle="RunWAR API">
      <doctitle><![CDATA[RunWAR API Reference (${runwarbuild.version})]]></doctitle>
      <bottom><![CDATA[]]></bottom>
      <link href="http://docs.oracle.com/javase/7/docs/api/"/>
    </javadoc>
    <zip destfile="${dist.dir}/runwar-${runwarbuild.version}-javadoc.jar" update="false">
      <fileset dir="${javadoc.dir}" />
    </zip>
  </target>

  <target name="runwar.mvn" depends="runwar.jar,runwar.javadoc">
    <runwar.initprops />
    <antcontrib:if>
      <equals arg1="${mvn.type}" arg2="snapshot" />
      <then>
        <property name="runwarbuild.mvn.version" value="${runwarbuild.version}-SNAPSHOT" />
      </then>
    </antcontrib:if>
    <property name="runwarbuild.mvn.version" value="${runwarbuild.version}" />

    <zip destfile="${dist.dir}/runwar-${runwarbuild.version}-sources.jar">
      <fileset dir="${runwar.src.dir}" />
    </zip>
    <copy file="pom.skel.xml" tofile="${dist.dir}/pom.xml" overwrite="true">
      <filterchain><expandproperties /></filterchain>
    </copy>

    <pom-and-deploy pomid="runwar.pom" file="${dist.dir}/pom.xml" artifact="${runwar.jar.file}"  packaging="jar" groupId="org.cfmlprojects"
      artifactId="runwar" version="${runwarbuild.version}" name="runwar" buildtype="snapshot">
      <attachments>
        <attach file="${dist.dir}/runwar-${runwarbuild.version}-javadoc.jar" classifier="javadoc"/>
        <attach file="${dist.dir}/runwar-${runwarbuild.version}-sources.jar" classifier="sources"/>
      </attachments>
    </pom-and-deploy>
  </target>

   <target name="runwar.mvn.central" depends="runwar.mvn">
    <runwar.initprops />
    <property name="sonatype.cfmlprojects.user" value="" />
    <property name="sonatype.cfmlprojects.pass" value="" />
    <property name="gpg.cfmlprojects.secring" value="" />
    <property name="gpg.cfmlprojects.pubring" value="" />
    <property name="gpg.cfmlprojects.signkeyid" value="" />
    <property name="gpg.cfmlprojects.pass" value="" />

    <pom-gpgsign-and-deploy repoId="sonatype.repo" pomid="runwar.c.pom" file="${dist.dir}/pom.xml" artifact="${runwar.jar.file}"  packaging="jar" groupId="org.cfmlprojects"
      artifactId="runwar" version="${runwarbuild.version}" name="runwar" buildtype="${mvn.type}"
      repoUser="${sonatype.cfmlprojects.user}" repoPassword="${sonatype.cfmlprojects.pass}" repoUrl="${sonatype.repo.url}"
      secring="${gpg.cfmlprojects.secring}" pubring="${gpg.cfmlprojects.pubring}" keyid="${gpg.cfmlprojects.signkeyid}" keypass="${gpg.cfmlprojects.pass}"
      dir="${dist.dir}">
      <attachments>
        <attach file="${dist.dir}/pom.xml.asc" type="pom.asc"/>
        <attach file="${dist.dir}/runwar-${runwarbuild.version}.jar.asc" type="jar.asc"/>
        <attach file="${dist.dir}/runwar-${runwarbuild.version}-javadoc.jar" classifier="javadoc"/>
        <attach file="${dist.dir}/runwar-${runwarbuild.version}-javadoc.jar.asc" classifier="javadoc" type="jar.asc"/>
        <attach file="${dist.dir}/runwar-${runwarbuild.version}-sources.jar" classifier="sources"/>
        <attach file="${dist.dir}/runwar-${runwarbuild.version}-sources.jar.asc" classifier="sources" type="jar.asc"/>
      </attachments>
    </pom-gpgsign-and-deploy>

  </target>

  <target name="get.deps">
    <delete dir="${runwar.lib.dir}" />
    <mvn-repo id="jboss.repo" url="http://repository.jboss.org/nexus/content/repositories/releases" />
    <dependency groupId="net.minidev" artifactId="json-smart-mini" version="1.0.8" unzip="false" type="jar"
      dest="${runwar.lib.dir}" />
    <dependency groupId="org.tuckey" artifactId="urlrewritefilter" version="4.0.4" unzip="false" type="jar"
      dest="${runwar.lib.dir}" />
    <dependency groupId="org.bouncycastle" artifactId="bcpkix-jdk15on" version="1.51" unzip="false" type="jar"
      dest="${runwar.lib.dir}" />
    <!--  replace options with this eventually
    -->
    <dependency groupId="net.sf.jopt-simple" artifactId="jopt-simple" version="5.0-beta-1" unzip="false" type="jar"
      dest="${runwar.lib.dir}" />
    <dependency groupId="commons-cli" artifactId="commons-cli" version="1.2" unzip="false" type="jar"
      dest="${runwar.lib.dir}" repoId="jboss.repo" />
    <dependency groupId="io.undertow" artifactId="undertow-jsp" version="1.0.0.Beta27" unzip="false" type="jar"
      dest="${runwar.lib.dir}" repoId="jboss.repo">
      <exclusions>
        <exclusion groupId="io.undertow" artifactId="undertow-servlet" />
        <exclusion groupId="org.jboss.spec.javax.annotation" artifactId="jboss-annotations-api_1.1_spec" />
        <exclusion groupId="io.undertow.jastow" artifactId="jastow" />
        <exclusion groupId="org.jboss.logging" artifactId="jboss-logging-processor" />
        <exclusion groupId="org.jboss.spec.javax.servlet" artifactId="jboss-servlet-api_3.1_spec" />
        <exclusion groupId="org.jboss.web" artifactId="jasper-jdt" />
      </exclusions>
    </dependency>

    <dependency groupId="io.undertow" artifactId="undertow-servlet" version="${undertow.version}" unzip="false"
      type="jar" dest="${runwar.lib.dir}" repoId="jboss.repo">
      <exclusions>
        <exclusion groupId="org.jboss.spec.javax.annotation" artifactId="jboss-annotations-api_1.2_spec" />
      </exclusions>
    </dependency>

    <dependency groupId="com.dorkbox" artifactId="SystemTray" version="2.20" unzip="false" type="jar" dest="${runwar.lib.dir}" />
  </target>

  <target name="runwar.test" depends="runwar.jar">
    <property name="tests.dir" location="../tests" />
      <dependency groupId="com.adobe" artifactId="coldfusion" version="2016.0.0.297996" unzip="false"
      type="war" dest="${tests.dir}/resource/war/adobe space/" />
      <dependency groupId="org.lucee" artifactId="lucee.war" version="4.5.2.018" unzip="false"
      type="war" dest="${tests.dir}/resource/war/lucee space/" />
  </target>

  <target name="runembedded.jar" description="creates an jar with the WAR embedded">
    <antcontrib:if>
      <equals arg1="${build.type}" arg2="prod" />
      <then />
      <else>
        <input message="Maybe you should be using build.type=prod?  Mappings won't be copied into war..." />
      </else>
    </antcontrib:if>
    <property name="runembedded.jar.file" value="${dist.dir}/embedded/${war.name}.jar" />
    <delete dir="${dist.dir}/${war.name}.war" />
    <antcontrib:runtarget target="build" />
    <antcontrib:runtarget target="jar.war" />
    <delete dir="${dist.dir}/embedded" />
    <mkdir dir="${dist.dir}/embedded" />
    <echo file="${dist.dir}/embedded/runwar.properties" message="war.name=${war.name}" />
    <jar destfile="${runembedded.jar.file}" filesetmanifest="mergewithoutmain">
      <manifest>
        <attribute name="Main-Class" value="runwar.RunEmbeddedWar" />
        <attribute name="Class-Path" value="./${runwar.jar}" />
      </manifest>
      <zipfileset src="${runwar.jar.file}" />
      <fileset file="${dist.dir}/${war.name}.war" />
      <fileset dir="${dist.dir}/embedded/" />
      <zipfileset src="${runwar.jar.file}" />
    </jar>
  </target>

  <target name="if.toolong.echo" if="toolong">
    <loadfile property="errlog" srcFile="${runwar.log.dir}/runner.log.txt" failonerror="false" />
    <echo message="${errlog}" />
  </target>

  <target name="runwar.install" description="creates start script">
    <antcontrib:propertyregex property="war.contextpath" input="${war.contextpath}" regexp="^/?([^/]+)"
      select="/\1" global="false" override="yes" />
    <echo message="starting runwar (${server.jvm.args})" />
    <property name="runwar.dir" location="${war.target.dir}/WEB-INF/" />
    <mkdir dir="${runwar.dir}" />
    <copy todir="${runwar.dir}">
      <fileset file="${runwar.jar.file}" />
    </copy>
    <echo file="${dist.dir}/${distro.name}.sh"><![CDATA[#start script
if test -n "${JAVA_HOME}"; then
if test -z "${JAVA_EXE}"; then
JAVA_EXE=$JAVA_HOME/bin/java
fi
fi

if test -z "${JAVA_EXE}"; then
JAVA_EXE=java
fi
cd $(dirname $0)
exec $JAVA_EXE ${server.jvm.args} -cp ${war.name}.war/WEB-INF/${runwar.jar} -jar ${war.name}.war/WEB-INF/${runwar.jar} ${war.name}.war -war ${war.contextpath} -host ${runwar.host} -port ${runwar.port} -stop-port ${runwar.stop.socket} -logdir ${runwar.log.dir} -cfml-dirs ${runwar.cfml.dirlist} -background false]]>
</echo>
    <chmod file="${dist.dir}/${distro.name}.sh" perm="ugo+rx"/>
  </target>

  <target name="runwar.start.fg" description="starts server in foreground">
    <runwar.initprops />
    <antcontrib:var name="background" value="false" />
    <antcontrib:runtarget target="runwar.start" />
  </target>

  <target name="runwar.start" description="starts server">
    <runwar.initprops />
    <echoproperties prefix="runwar" />
    <property name="background" value="true" />
    <property name="runwar.background" value="${background}" />
    <property name="runwar.openbrowser" value="false" />
    <property name="runwar.keeprequestlog" value="false" />
    <mkdir dir="${runwar.log.dir}" />
    <ant-set-log-level level="2" />
    <echo message="starting runner (host: ${runwar.host} port: ${runwar.port} server.jvm.args : ${server.jvm.args})" />
    <sequential>
      <path id="cfdistro.libs.path">
        <fileset dir="${cfdistro.lib.dir}">
          <include name="*.jar" />
        </fileset>
      </path>
      <condition property="osxJVMargs"
        value="-Dcom.apple.mrj.application.apple.menu.about.name=${distro.name} -Dcom.apple.mrj.application.growbox.intrudes=false -Dapple.laf.useScreenMenuBar=true -Dfile.encoding=UTF-8 -Xdock:name=${distro.name}"
        else="">
        <os family="mac" />
      </condition>

      <java jar="${runwar.jar.file}" fork="true" spawn="false" maxmemory="${runwar.maxmemory}" failonerror="false"
        resultproperty="runwarstatus">
        <jvmarg line="${server.jvm.args}" />
        <!--
          <sysproperty key="java.library.path" path=""/>
        -->
        <arg value="-war" />
        <arg value="${runwar.war.path}" />
        <arg value="-context" />
        <arg value="${runwar.war.contextpath}" />
        <arg value="-host" />
        <arg value="${runwar.host}" />
        <arg value="-port" />
        <arg value="${runwar.port}" />
        <arg value="-stop-port" />
        <arg value="${runwar.stop.socket}" />
        <arg value="-enable-ajp" />
        <arg value="${server.ajp.enable}" />
        <arg value="-ajp-port" />
        <arg value="${server.port.ajp}" />
        <arg value="-log-dir" />
        <arg value="${runwar.log.dir}" />
        <arg value="-loglevel" />
        <arg value="${runwar.log.level}" />
        <arg value="-dirs" />
        <arg value="${runwar.cfml.dirlist}" />
        <arg value="-background" />
        <arg value="${background}" />
        <arg value="-requestlog" />
        <arg value="${runwar.keeprequestlog}" />
        <arg value="-open-browser" />
        <arg value="${runwar.openbrowser}" />
        <arg value="-open-url" />
        <arg value="${open.url}" />
        <arg value="-processname" />
        <arg value="${distro.name}" />
        <jvmarg line="${osxJVMargs}" />
        <!--
          <jvmarg value="-Xdebug"/>
        -->
      </java>
      <antcontrib:if>
        <not>
          <equals arg1="0" arg2="${runwarstatus}" />
        </not>
        <then>
          <fail message="could not start runner" />
        </then>
      </antcontrib:if>
      <antcontrib:if>
        <and>
          <equals arg1="${background}" arg2="true" />
          <not>
            <equals arg1="${runwar.port}" arg2="0" />
          </not>
        </and>
        <then>
          <echo message="waiting for runner" />
          <sleep seconds="7" />
          <waitfor maxwait="51" maxwaitunit="second" checkevery="3" checkeveryunit="second" timeoutproperty="toolong">
            <and>
              <socket server="${runwar.host}" port="${runwar.port}" />
              <!--
                <http url="http://127.0.0.1:${runwar.port}/" />
                <http url="http://127.0.0.1:${runwar.port}/${runwar.war.contextpath}build.cfc" />
              -->
            </and>
          </waitfor>
          <antcontrib:runtarget target="if.toolong.echo" />
          <echo message="stop server with target: runwar.stop" />
        </then>
        <!-- <else><echo message="${runwarou}" /></else> -->
      </antcontrib:if>
      <antcontrib:var name="runwarou" unset="true" />
      <loadfile property="runwarou" srcfile="${runwar.log.dir}/server.out.txt" />
      <antcontrib:propertyregex property="runwar.pid" input="${runwarou}" regexp="Server is up.*PID:([^\s]+)?.*"
        select="\1" global="false" override="yes" />
      <antcontrib:propertyregex property="runwar.port" input="${runwarou}"
        regexp="Server is up.*http-port:([^\s]+)?.*" select="\1" global="false" override="yes" />
      <antcontrib:propertyregex property="runwar.stop.socket" input="${runwarou}"
        regexp="Server is up.*stop-port:([^\s]+)?.*" select="\1" global="false" override="yes" />
      <echoproperties prefix="runwar."></echoproperties>
      <echo message="${runwarou}" />
      <antcontrib:var name="server.port.http" value="${runwar.port}" />
      <antcontrib:var name="runwarou" unset="true" />
    </sequential>
  </target>

  <target name="runwar.stop" description="stops server">
    <runwar.initprops />
    <echo message="stopping runner (using stop listener on port ${runwar.stop.socket})." />
    <antcontrib:trycatch property="foo" reference="bar">
      <try>
        <java classname="runwar.Stop" classpathref="runwar.lib.path">
          <arg value="${runwar.stop.socket}" />
        </java>
      </try>
      <catch>
        <fail message="Could not stop the server. Might not have been running." />
      </catch>
    </antcontrib:trycatch>
    <echo message="peace out bro!" />
  </target>

  <target name="server.openUrl" description="launches a browser pointing at ${open.url}">
    <runwar.initprops />
    <open-url url="${open.url}" />
  </target>

  <target name="runwar.start.stop" description="starts and then stops the server for some odd reason.  generation of stuff maybe?">
    <parallel>
      <sequential>
        <antcall target="runwar.start" />
        <sleep seconds="5" />
        <antcall target="runwar.stop" />
      </sequential>
    </parallel>
  </target>

  <target name="runwar.stop.start" description="stops and then starts the server for some odd reason.  generation of stuff maybe?">
    <parallel>
      <sequential>
        <antcall target="runwar.stop" />
        <sleep seconds="5" />
        <antcall target="runwar.start" />
      </sequential>
    </parallel>
  </target>


</project>
